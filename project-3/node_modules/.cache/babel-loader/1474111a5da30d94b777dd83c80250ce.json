{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: \"http://localhost:3001\"\n}); // =============Auth ==============//\n// Route ---> localhost:3001/auth/register\n\nexport const userSignup = async registerData => {\n  const userData = await api.post('/auth/register', registerData);\n  localStorage.setItem('authToken', userData.data.token);\n  api.defaults.headers.common.authorization = `Bearer ${userData.data.token}`;\n  return userData.data.user;\n};\nexport const loginUser = async loginData => {\n  // Take the username and password the user entered in the login form\n  // and POST it to our express api. Then...we await...\n  const userData = await api.post('/auth/login', loginData); //Set our jwt token into localStorage so that we can use it to\n  // verify our user in the future (DO NOT STORE THE USER'S PASSWORD\n  // IN THE FRONT END). We can instead use the token to verify the user\n  // which keeps all personal information safe and secure.\n\n  localStorage.setItem('authToken', userData.data.token); // We're attaching the token to our http headers, these are `meta`\n  // information, extra information that is sent along with our request.\n  // In this case we are sending a Bearer Token which the back end api\n  // will be able to check against the token that is saved in the database.\n\n  api.defaults.headers.common.authorization = `Bearer ${userData.data.token}`; // We only need the username and id on the front end, so that's all we're\n  // sending.\n\n  return userData.data.user;\n};","map":{"version":3,"sources":["C:/Users/cmt3902/CFG/week9/project3/Front-end/project-wayfarer/project-3/src/services/api_helper.js"],"names":["axios","api","create","baseURL","userSignup","registerData","userData","post","localStorage","setItem","data","token","defaults","headers","common","authorization","user","loginUser","loginData"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAN,CAAa;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAAb,CAAZ,C,CACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAG,MAAOC,YAAP,IAAwB;AAChD,QAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAJ,CAAS,gBAAT,EAA2BF,YAA3B,CAAvB;AACAG,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCH,QAAQ,CAACI,IAAT,CAAcC,KAAhD;AACAV,EAAAA,GAAG,CAACW,QAAJ,CAAaC,OAAb,CAAqBC,MAArB,CAA4BC,aAA5B,GAA6C,UAAST,QAAQ,CAACI,IAAT,CAAcC,KAAM,EAA1E;AACA,SAAOL,QAAQ,CAACI,IAAT,CAAcM,IAArB;AACD,CALM;AAOP,OAAO,MAAMC,SAAS,GAAG,MAAOC,SAAP,IAAqB;AAC1C;AACA;AACA,QAAMZ,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAJ,CAAS,aAAT,EAAwBW,SAAxB,CAAvB,CAH0C,CAI1C;AACA;AACA;AACA;;AACAV,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCH,QAAQ,CAACI,IAAT,CAAcC,KAAhD,EAR0C,CAS1C;AACA;AACA;AACA;;AACAV,EAAAA,GAAG,CAACW,QAAJ,CAAaC,OAAb,CAAqBC,MAArB,CAA4BC,aAA5B,GAA6C,UAAST,QAAQ,CAACI,IAAT,CAAcC,KAAM,EAA1E,CAb0C,CAc1C;AACA;;AACA,SAAOL,QAAQ,CAACI,IAAT,CAAcM,IAArB;AACD,CAjBI","sourcesContent":["import axios from 'axios';\r\nconst api = axios.create({ baseURL: \"http://localhost:3001\" });\r\n// =============Auth ==============//\r\n// Route ---> localhost:3001/auth/register\r\nexport const userSignup = async (registerData) => {\r\n  const userData = await api.post('/auth/register', registerData);\r\n  localStorage.setItem('authToken', userData.data.token);\r\n  api.defaults.headers.common.authorization = `Bearer ${userData.data.token}`;\r\n  return userData.data.user;\r\n}\r\n\r\nexport const loginUser = async (loginData) => {\r\n    // Take the username and password the user entered in the login form\r\n    // and POST it to our express api. Then...we await...\r\n    const userData = await api.post('/auth/login', loginData);\r\n    //Set our jwt token into localStorage so that we can use it to\r\n    // verify our user in the future (DO NOT STORE THE USER'S PASSWORD\r\n    // IN THE FRONT END). We can instead use the token to verify the user\r\n    // which keeps all personal information safe and secure.\r\n    localStorage.setItem('authToken', userData.data.token);\r\n    // We're attaching the token to our http headers, these are `meta`\r\n    // information, extra information that is sent along with our request.\r\n    // In this case we are sending a Bearer Token which the back end api\r\n    // will be able to check against the token that is saved in the database.\r\n    api.defaults.headers.common.authorization = `Bearer ${userData.data.token}`;\r\n    // We only need the username and id on the front end, so that's all we're\r\n    // sending.\r\n    return userData.data.user;\r\n  }\r\n"]},"metadata":{},"sourceType":"module"}