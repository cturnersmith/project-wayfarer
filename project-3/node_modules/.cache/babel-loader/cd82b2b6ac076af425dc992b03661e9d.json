{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cmt3902\\\\CFG\\\\week9\\\\project3\\\\Front-end\\\\project-wayfarer\\\\project-3\\\\src\\\\Components\\\\Posts\\\\PostContainer.js\";\nimport React, { Component } from 'react';\nimport { Route, withRouter } from 'react-router-dom';\nimport { postPost, indexCities, destroyPost, putPost, getCityPosts } from '../../services/api_helper';\nimport CreatePostForm from './CreatePostForm';\nimport UpdatePostForm from './UpdatePostForm';\nimport Cities from './Cities';\nimport PostList from './PostList';\nimport SinglePost from './SinglePost';\n\nclass PostContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getCities = async () => {\n      const allCities = await indexCities();\n      this.setState({\n        cities: allCities\n      });\n    };\n\n    this.createPost = async (e, id, postData) => {\n      e.preventdefault();\n      const newPost = await postPost(id, postData);\n      const posts = this.state.posts;\n      posts.push(newPost.data);\n      this.setState({\n        posts: posts\n      });\n    };\n\n    this.updatePost = async (event, id, values) => {\n      event.preventDefault();\n      const updatePost = await putPost(id, values);\n      const allPosts = this.state.posts;\n      const editedPosts = allPosts.map(post => {\n        return post.id === parseInt(id) ? updatePost : post;\n      });\n      this.setState({\n        posts: editedPosts\n      });\n      this.props.history.push('/posts');\n    };\n\n    this.destroyPost = async id => {\n      await destroyPost(id);\n      const allPosts = this.state.posts;\n      const remainingPosts = allPosts.filter(post => {\n        return post.id !== id;\n      });\n      this.setState({\n        posts: remainingPosts\n      });\n      this.props.history.push('/posts');\n    };\n\n    this.handleCityClick = async cityId => {\n      console.log(cityId);\n      const posts = await getCityPosts(cityId);\n      this.setState({\n        cityId: cityId,\n        posts: posts.Posts\n      });\n    };\n\n    this.state = {\n      posts: [],\n      cityId: \"1\",\n      cities: []\n    };\n  }\n\n  componentDidMount() {\n    this.getCities();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/posts/:id/edit\",\n      render: props => {\n        return /*#__PURE__*/React.createElement(UpdatePostForm, {\n          posts: this.state.posts,\n          updatePost: this.updatePost,\n          postId: props.match.params.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Cities, {\n      handleCityClick: this.handleCityClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(PostList, {\n      posts: this.state.posts,\n      cityId: this.state.cityId,\n      createPost: this.createPost,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/posts/:id\",\n      render: props => {\n        return /*#__PURE__*/React.createElement(SinglePost, {\n          posts: this.state.posts,\n          postId: props.match.params.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 16\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}\n\nexport default withRouter(PostContainer);","map":{"version":3,"sources":["C:/Users/cmt3902/CFG/week9/project3/Front-end/project-wayfarer/project-3/src/Components/Posts/PostContainer.js"],"names":["React","Component","Route","withRouter","postPost","indexCities","destroyPost","putPost","getCityPosts","CreatePostForm","UpdatePostForm","Cities","PostList","SinglePost","PostContainer","constructor","props","getCities","allCities","setState","cities","createPost","e","id","postData","preventdefault","newPost","posts","state","push","data","updatePost","event","values","preventDefault","allPosts","editedPosts","map","post","parseInt","history","remainingPosts","filter","handleCityClick","cityId","console","log","Posts","componentDidMount","render","match","params"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport { Route, withRouter } from 'react-router-dom';\r\nimport {postPost, indexCities, destroyPost, putPost, getCityPosts} from '../../services/api_helper';\r\n\r\nimport CreatePostForm from './CreatePostForm';\r\nimport UpdatePostForm from './UpdatePostForm';\r\nimport Cities from './Cities';\r\nimport PostList from './PostList';\r\nimport SinglePost from './SinglePost';\r\n\r\n\r\n\r\n\r\nclass PostContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            posts: [],\r\n            cityId: \"1\",\r\n            cities: []\r\n        }\r\n    }\r\n    getCities = async () => {\r\n        const allCities = await indexCities();\r\n            this.setState({\r\n                cities: allCities\r\n            })\r\n    }\r\ncomponentDidMount(){\r\n    this.getCities()\r\n}\r\n\r\ncreatePost = async (e, id, postData) => {\r\n    e.preventdefault();\r\n    const newPost = await postPost(id, postData);\r\n    const posts = this.state.posts;\r\n    posts.push(newPost.data);\r\n    this.setState({\r\n        posts: posts\r\n    })\r\n}\r\n\r\nupdatePost = async (event, id, values) => {\r\n    event.preventDefault();\r\n    const updatePost = await putPost (id, values);\r\n    const allPosts = this.state.posts;\r\n    const editedPosts = allPosts.map(post => {\r\n        return post.id === parseInt(id) ? updatePost: post\r\n    })\r\n    this.setState({\r\n        posts: editedPosts\r\n    })\r\n    this.props.history.push('/posts');\r\n}\r\n\r\ndestroyPost = async (id) => {\r\n    await destroyPost(id);\r\n    const allPosts = this.state.posts;\r\n    const remainingPosts = allPosts.filter(post => {\r\n        return post.id !== id\r\n    })\r\n    this.setState({\r\n        posts: remainingPosts\r\n    })\r\n    this.props.history.push('/posts');\r\n}\r\n\r\nhandleCityClick = async(cityId) => {\r\n    console.log(cityId);\r\n    const posts = await getCityPosts(cityId)\r\n    this.setState({\r\n        cityId: cityId,\r\n        posts:posts.Posts\r\n\r\n    })\r\n}\r\n\r\n\r\n\r\nrender() {\r\n    return(\r\n    <div>\r\n        {/* <CreatePostForm handleSubmit={this.createPost}\r\n        cities = {this.state.cities} />  */}\r\n        \r\n        <Route path=\"/posts/:id/edit\" render={(props) => {\r\n        return<UpdatePostForm\r\n        posts={this.state.posts}\r\n        updatePost={this.updatePost}\r\n        postId={props.match.params.id}\r\n        />\r\n    }} />\r\n    <Cities handleCityClick={this.handleCityClick}/>\r\n    <PostList posts={this.state.posts} cityId={this.state.cityId} createPost={this.createPost} />\r\n    <Route path = '/posts/:id' render={(props) =>{\r\n        return <SinglePost\r\n        posts={this.state.posts} postId={props.match.params.id} />\r\n            }} /> \r\n    </div>\r\n\r\n    ) \r\n}\r\n}\r\n\r\nexport default withRouter (PostContainer);"]},"metadata":{},"sourceType":"module"}